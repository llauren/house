#!/usr/bin/env python

import config

import logging
logging.basicConfig(format='%(asctime)s %(level)s: %(message)s')

import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--log", help="Log level (DEBUG, INFO, default=WARNING, ERROR)")
args = parser.parse_args()
if args.log:
    logging.basicConfig(level=args.log)

import time

import paho.mqtt.client as mqtt
client = mqtt.Client()

lights = ['Trees', 'Front', 'Stairs']

#prini The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    logging.info("Connected with result code %s" % str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    # client.subscribe("$SYS/#")
    client.subscribe("/events/#")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    logging.info("%s : %s", msg.topic, str(msg.payload))

    doit = False
    if (msg.topic.startswith("/events/sun")):
        if msg.payload in [ 'sunrise', 'dawn' ]:
            value = 0
            doit = True
        if msg.payload in [ 'sunset', 'dusk' ]:
            value = 1
            doit = True

        if doit:
            for light in lights:
                topic = "/devices/42-Switch/controls/" + light + "/on"
                logging.info("%s : %s", topic, value)
                client.publish(topic, value)
                time.sleep(0.1)

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

#print(getattr(logging, level.upper()))

logging.info('connecting to %s', config.broker)
client.connect(config.broker, 1883, 6)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface. 

rc = 0
while rc == 0:
  try: 
    rc = client.loop()
  except KeyboardInterrupt, SystemExit:
    client.unsubscribe("/events/#")
    client.disconnect()
    #on_disconnect()
    logging.info("Bye!")
   # sys.exit()

